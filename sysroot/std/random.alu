//! Random number generation

use std::builtins::{Unsigned, Integer, FloatingPoint};

/// Random number generators
///
/// Random number generators need to provide [Rng::next_u32] and [Rng::next_u64] methods,
/// other methods can be mixed in.
///
/// ## Example implementation
/// ```
/// use std::random::{Rng, next};
///
/// struct Lcg {
///    state: u32,
/// }
///
/// impl Lcg {
///     fn with_seed(seed: u32) -> Lcg {
///         Lcg { state: seed }
///     }
///
///     fn next_u32(self: &mut Lcg) -> u32 {
///         self.state = 1664525u32 * self.state + 1013904223u32;
///         self.state as u32
///     }
///
///     fn next_u64(self: &mut Lcg) -> u64 {
///         (self.next_u32() as u64) << 32 | (self.next_u32() as u64)
///     }
///
///     mixin Rng<Lcg>;
/// }
///
/// let rng = Lcg::with_seed(0x15b3249);
/// for i in 0..10 {
///    println!("{}", rng.next(0..10));
/// }
/// ```
protocol Rng<Self> {
    /// Generate a 32-bit integer.
    fn next_u32(self: &mut Self) -> u32;

    /// Generate a 64-bit integer.
    fn next_u64(self: &mut Self) -> u64;

    /// Fill the slice with random bytes.
    fn fill_bytes(self: &mut Self, dest: &mut [u8]) {
        let i = 0usize;
        while dest.len() >= 8 {
            let val = self.next_u64();
            for i in 0..8 {
                dest[i] = *((&val as &u8) + i);
            }
            dest = dest[8..];
        }

        if dest.len() > 4 {
            let val = self.next_u64();
            for i in 0..dest.len() {
                dest[i] = *((&val as &u8) + i);
            }
        } else {
            let val = self.next_u32();
            for i in 0..dest.len() {
                dest[i] = *((&val as &u8) + i);
            }
        }
    }
}

/// PCG-32 random number generator
///
/// A small-state general purpose random number generator ([https://www.pcg-random.org/]).
///
/// Not suitable for cryptographic purposes.
struct Pcg32  {
    state: u64,
    increment: u64,
}

impl Pcg32 {
    /// Create a Pcg32 random number generator from a given seed.
    fn from_seed(seed: &[u8; 16]) -> Pcg32 {
        let seed = seed.as_slice();
        let pcg: Pcg32;

        seed[0..8].copy_to_nonoverlapping(&pcg.state as &mut u8);
        seed[8..16].copy_to_nonoverlapping(&pcg.increment as &mut u8);
        pcg.increment = pcg.increment | 1;

        pcg.state = pcg.state + pcg.increment;
        pcg._step();
        pcg
    }

    /// @ Rng::next_u32
    #[inline]
    fn next_u32(self: &mut Pcg32) -> u32 {
        let state = self.state;
        self._step();

        const ROTATE: u32 = 59;
        const XSHIFT: u32 = 18;
        const SPARE: u32 = 27;

        let rot = (state >> ROTATE) as usize;
        let xsh = (((state >> XSHIFT) ^ state) >> SPARE) as u32;

        xsh.rotate_right(rot)
    }

    /// @ Rng::next_u64
    #[inline]
    fn next_u64(self: &mut Pcg32) -> u64 {
        (self.next_u32() as u64) << 32 | (self.next_u32() as u64)
    }

    #[inline]
    fn _step(self: &mut Pcg32) {
        const MUTLIPLIER = 6364136223846793005u64;
        self.state = self.state * MUTLIPLIER + self.increment;
    }

    mixin Rng<Pcg32>;
}

#[cfg(any(target_os = "linux", target_os = "android", target_os = "macos"))]
{
    /// RNG backed by a OS-provided random number generation facility
    ///
    /// On Linux, this is based on `getrandom` syscall, on other UNIX-like platforms, this
    /// reads the bytes from `/dev/urandom`.
    ///
    /// ## Usage notes
    /// `OsRng` is generally considered to be safe to use for cryptographic purposes. However, since
    /// it results in a syscall for each operation, it may not be a good general-purpose RNG.
    ///
    /// Good choice for seeding other RNGs.
    struct OsRng {
        #[cfg(not(target_os = "linux"))]
        file: fs::File
    }

    impl OsRng {
        use mem::{size_of, slice};

        /// Create a new instance of OsRng
        #[cfg(not(target_os = "linux"))]
        fn new() -> OsRng {
            use fs::Path;

            OsRng {
                file: fs::File::open(Path::new("/dev/urandom"))
                .unwrap()
            }
        }

        /// Create a new instance of OsRng
        #[cfg(target_os = "linux")]
        fn new() -> OsRng {
            OsRng {}
        }

        /// @ Rng::next_u32
        fn next_u32(self: &mut OsRng) -> u32 {
            let ret: u32;
            self.fill_bytes(slice::from_raw(&ret as &mut u8, size_of::<u32>()));
            ret
        }

        /// @ Rng::next_u64
        fn next_u64(self: &mut OsRng) -> u64 {
            let ret: u64;
            self.fill_bytes(slice::from_raw(&ret as &mut u8, size_of::<u64>()));
            ret
        }

        /// @ Rng::fill_bytes
        fn fill_bytes(self: &mut OsRng, dest: &mut [u8]) {
            #[cfg(not(target_os = "linux"))]
            self.file.read_exact(dest).unwrap();
            #[cfg(target_os = "linux")]
            libc::getrandom(&dest[0] as &mut void, dest.len(), 0);
        }

        /// Close the file descriptor
        ///
        /// On Linux this is a no-op.
        fn close(self: &mut OsRng) {
            #[cfg(not(target_os = "linux"))]
            self.file.close().unwrap();
        }

        mixin Rng<OsRng>;
    }
}

/// A thread-local RNG that's seeded from the operating system.
///
/// Lazily initialized on first access from each thread.
fn thread_rng() -> &mut Pcg32 {
    if !internal::THREAD_RNG.is_some {
        internal::THREAD_RNG = Option::some(internal::seed_default_rng());
    }
    &internal::THREAD_RNG.inner
}


/// Generate a random number in a given [integer range](std::range).
///
/// All range types are supported.
///
/// ## Example
/// ```
/// use std::random::{thread_rng, next};
///
/// let value: i32 = thread_rng().next(0..3);
/// assert!(value >= 0 && value < 3);
///
/// let value: i32 = thread_rng().next(0..=3);
/// assert!(value >= 0 && value <= 3);
///
/// let value: i32 = thread_rng().next(..3);
/// assert!(value < 3);
///
/// let value: i32 = thread_rng().next(..=3);
/// assert!(value <= 3);
///
/// let value: i32 = thread_rng().next(3..);
/// assert!(value >= 3);
///
/// let value: i32 = thread_rng().next(..);
/// // Any possible value of i32
/// ```
fn next<R: Rng<R>, T: Integer, R1: builtins::RangeOf<T>>(rng: &mut R, range: R1) -> T {
    use builtins::unsigned_of;
    use std::range::{Range, RangeInclusive, RangeTo, RangeToInclusive, RangeFrom, RangeFull};

    when R1: Range<T> {
        debug_assert!(range.lower < range.upper);

        let bound = (range.upper as unsigned_of<T>) - (range.lower as unsigned_of<T>);
        let ret = (range.lower as unsigned_of<T>) + internal::uniform(rng, bound);

        ret as T
    } else when R1: RangeInclusive<T> {
        debug_assert!(range.lower <= range.upper);

        let bound = ((range.upper as unsigned_of<T>) - (range.lower as unsigned_of<T>)) + 1;
        if bound == 0 {
            next_integer::<R, unsigned_of<T>>(rng) as T
        } else {
            let ret = (range.lower as unsigned_of<T>) + internal::uniform(rng, bound);
            ret as T
        }
    } else when R1: RangeTo<T> {
        rng.next(T::min_value()..range.upper)
    } else when R1: RangeToInclusive<T> {
        rng.next(T::min_value()..=range.upper)
    } else when R1: RangeFrom<T> {
        rng.next(range.lower..=T::max_value())
    } else when R1: RangeFull<T> {
        next_integer::<R, unsigned_of<T>>(rng) as T
    } else {
        compile_fail!("unsupported range type")
    }
}


/// Generate a random integer of any unsigned integer type
///
/// Each possible value that the integer can take is equally likely
fn next_integer<R: Rng<R>, T: Unsigned>(rng: &mut R) -> T {
    when T: u128 {
        ((rng.next_u64() as u128)  << 64) | (rng.next_u64() as u128)
    } else when T: u64 {
        rng.next_u64()
    } else when T: usize {
        let x: T;
        #[cfg(target_pointer_width = "32")]
        x = rng.next_u32() as usize;
        #[cfg(target_pointer_width = "64")]
        x = rng.next_u64() as usize;
        x
    } else {
        rng.next_u32() as T
    }
}

/// Generate a random floating point number in `[0, 1)` interval
///
/// ## Example
/// ```
/// use std::random::{thread_rng, next_float};
///
/// let value: f64 = thread_rng().next_float();
///
/// assert!(value >= 0.0 && value < 1.0);
/// ```
fn next_float<R: Rng<R>, T: FloatingPoint>(rng: &mut R) -> T {
    when T: f32 {
        let scale = 1.0f32 / ((1u32 << 24) as f32);
        let x = rng.next_u32() >> 8;
        (x as f32) * scale
    } else when T: f64 {
        let scale = 1.0f64 / ((1u64 << 53) as f64);
        let x = rng.next_u64() >> 11;
        (x as f64) * scale
    }
}

/// Permute a slice of elements in random order.
fn shuffle<R: Rng<R>, T>(rng: &mut R, slice: &mut [T]) {
    use std::mem::swap;

    let i = 0usize;
    while i < slice.len() {
        let j = rng.next(i..slice.len());
        swap(&slice[i], &slice[j]);
        i += 1;
    }
}

/// Return a random element of the slice.
///
/// ## Example
/// ```
/// use std::random::{thread_rng, choice};
///
/// let value = thread_rng().choice(&["hello", "world"]);
///
/// assert!(value == "hello" || value == "world");
/// ```
fn choice<R: Rng<R>, T>(rng: &mut R, slice: &[T]) -> T {
    debug_assert!(slice.len() > 0);

    slice[rng.next(0usize..slice.len())]
}

mod internal {
    #[thread_local] static THREAD_RNG: Option<Pcg32>;

    fn seed_default_rng() -> Pcg32 {
        let seed: [u8; 16];
        let seeder = OsRng::new();
        defer seeder.close();

        seeder.fill_bytes(&seed);
        Pcg32::from_seed(&seed)
    }

    /// Generate a random integer between 0 (inclusive) and `upper_bound` (exclusive)
    fn uniform<R: Rng<R>, T: Unsigned>(rng: &mut R, upper_bound: T) -> T {
        debug_assert!(upper_bound > 0);

        loop {
            let x = next_integer::<R, T>(rng);
            let r = x % upper_bound;
            if x - r <= ~upper_bound {
                return r;
            }
        }
    }
}

#[cfg(all(test, test_std))]
mod tests {
    static SEED: [u8; 16] = mem::zeroed();

    #[test]
    fn test_float() {
        let rng = Pcg32::from_seed(&SEED)
        let _: f32 = rng.next_float();
        let _: f64 = rng.next_float();
    }

    #[test]
    fn test_range() {
        let rng = Pcg32::from_seed(&SEED)
        let _: i32 = rng.next(-10i32..10i32);
        let _: i64 = rng.next(-10i64..10i64);
        let _: i128 = rng.next(-10i128..10i128);
        let _: usize = rng.next(0usize..10usize);
    }

    #[test]
    fn test_range_inclusive() {
        let rng = Pcg32::from_seed(&SEED)
        let _: i32 = rng.next(-10i32..=10i32);
        let _: i64 = rng.next(-10i64..=10i64);
        let _: i128 = rng.next(-10i128..=10i128);
        let _: usize = rng.next(0usize..=10usize);
    }

    #[test]
    fn test_range_from() {
        let rng = Pcg32::from_seed(&SEED)
        let _: i32 = rng.next(0i32..);
        let _: i64 = rng.next(0i64..);
        let _: i128 = rng.next(0i128..);
        let _: usize = rng.next(0usize..);
    }

    #[test]
    fn test_range_to() {
        let rng = Pcg32::from_seed(&SEED)
        let _: i32 = rng.next(..10i32);
        let _: i64 = rng.next(..10i64);
        let _: i128 = rng.next(..10i128);
        let _: usize = rng.next(..10usize);
    }

    #[test]
    fn test_range_to_inclusive() {
        let rng = Pcg32::from_seed(&SEED)
        let _: i32 = rng.next(..=10i32);
        let _: i64 = rng.next(..=10i64);
        let _: i128 = rng.next(..=10i128);
        let _: usize = rng.next(..=10usize);
    }

    #[test]
    fn test_shuffle() {
        let rng = Pcg32::from_seed(&SEED)
        let v = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        rng.shuffle(v.as_slice_mut());

        assert_ne!(v.as_slice(), &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        cmp::sort(v.as_slice_mut());
        assert_eq!(v.as_slice(), &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    }
}
