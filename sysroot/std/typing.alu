//! Type reflection and `dyn` objects

type TypeId = usize;

/// Returns a unique identifer for the type passed as the generic parameter.
///
/// The resulting value is not guaranteed to be the same across compilations, but it is
/// guaranteed to be unique for each distinct type.
///
/// ## Example
/// ```
/// use std::typing::type_id;
///
/// assert_ne!(type_id::<u8>(), type_id::<u16>());
/// ```
fn type_id<T>() -> TypeId {
    intrinsics::type_id::<T>() as TypeId
}

/// Returns a human-readable name for the type passed as the generic parameter.
///
/// ## Example
/// ```
/// use std::typing::type_name;
///
/// assert_eq!(type_name::<u8>(), "u8");
/// ```
fn type_name<T>() -> &[u8] {
    intrinsics::type_name::<T>()
}

/// "Dyn" object, a type-erased pointer to an object and a vtable for protocol functions.
///
/// ```notest
/// type &dyn Protocol<...> = dyn<Protocol<dyn_self, ...>, &void>
/// type &mut dyn Protocol<...> = dyn<Protocol<dyn_self, ...>, &mut void>
/// ```
/// ## Example
/// ```
/// protocol Foo<Self> { fn foo(self: &Self); }
///
/// struct Bar {};
/// impl Bar {
///     fn foo(self: &Bar) { println!("Bar::foo"); }
/// }
///
/// struct Quux {};
/// impl Quux {
///     fn foo(self: &Quux) { println!("Quux::foo"); }
/// }
///
/// let bar: &dyn Foo = &Bar {};
/// let quux: &dyn Foo = &Quux {};
///
/// bar.foo(); // prints "Bar::foo"
/// quux.foo(); // prints "Quux::foo"
/// ```
#[lang(dyn)]
struct dyn<Proto, Ptr> {
    _ptr: Ptr,
    _vtable: &fn(),
}


/// Returns the names and associated values of enum variants.
///
/// ## Example
/// ```
/// use std::typing::enum_variants;
///
/// enum Foo {
///     Bar,
///     Quux,
/// }
///
/// let variants = enum_variants::<Foo>();
///
/// assert_eq!(variants.len(), 2);
/// assert_eq!(variants[0].0, "Bar");
/// assert_eq!(variants[0].1, Foo::Bar);
/// assert_eq!(variants[1].0, "Quux");
/// assert_eq!(variants[1].1, Foo::Quux);
/// ```
fn enum_variants<E: builtins::Enum>() -> &[(&[u8], E)] {
    (internal::ENUM_VARIANTS::<E>).as_slice()
}

mod internal {
    static ENUM_VARIANTS<E> = intrinsics::enum_variants::<E>();

    #[lang(enum_variant_new)]
    #[force_inline]
    fn make_enum_variant<E>(name: &[u8], value: E) -> (&[u8], E) {
        (name, value)
    }

    /// A placeholder for the `Self` type in the protocol of a dyn object.
    #[lang(dyn_self)]
    struct dyn_self {}

    #[lang(dyn_new)]
    #[force_inline]
    fn dyn_new<Proto, Ptr>(ptr: Ptr) -> dyn<Proto, builtins::void_ptr_of<Ptr>> {
        dyn {
            _ptr: ptr as builtins::void_ptr_of<Ptr>,
            _vtable: intrinsics::make_vtable::<Proto, builtins::deref_of<Ptr>>()
        }
    }

    #[lang(dyn_const_coerce)]
    #[force_inline]
    fn dyn_const_coerce<Proto>(self: dyn<Proto, &mut void>) -> dyn<Proto, &void> {
        dyn { _ptr: self._ptr, _vtable: self._vtable }
    }

    #[lang(dyn_const_cast)]
    #[force_inline]
    fn dyn_const_cast<Proto>(self: dyn<Proto, &void>) -> dyn<Proto, &mut void> {
        dyn { _ptr: self._ptr as &mut void, _vtable: self._vtable }
    }

    #[lang(dyn_data)]
    #[force_inline]
    fn dyn_data<Proto, Ptr>(self: dyn<Proto, Ptr>) -> Ptr {
        self._ptr
    }

    #[lang(dyn_vtable_index)]
    #[force_inline]
    fn dyn_vtable_index<Proto, Ptr>(self: dyn<Proto, Ptr>, idx: usize) -> fn() {
        *(self._vtable + idx)
    }
}

#[cfg(all(test, test_std))]
mod tests {
    #[test]
    fn test_type_id() {
        assert_eq!(type_id::<u8>(), type_id::<u8>());
        assert_ne!(type_id::<u8>(), type_id::<u16>());

        assert_eq!(type_id::<Option<&[u8]>>(), type_id::<Option<&[u8]>>());
        assert_ne!(type_id::<Option<&[u8]>>(), type_id::<Option<&mut [u8]>>());
    }


    #[test]
    fn test_type_name() {
        assert_eq!(type_name::<u8>(), "u8");
        assert_eq!(type_name::<u16>(), "u16");

        // inception
        assert_eq!(type_name::<type_name<type_name<u32>>>(), "type_name<type_name<u32>>");

    }

    #[test]
    fn test_dyn() {
        let b: &mut dyn iter::Iterator<i32>;

        b = &iter::repeat(42);
        let a: &dyn iter::Iterator<i32> = b;
        assert_eq!(a.size_hint(), Option::some(usize::max_value()));
        assert_eq!(b.size_hint(), Option::some(usize::max_value()));
        assert_eq!(b.next(), Option::some(42));
        assert_eq!(b.next(), Option::some(42));
        assert_eq!(b.next(), Option::some(42));
        // ...

        b = &iter::once(10);
        assert_eq!(b.next(), Option::some(10));
        assert_eq!(b.next(), Option::none());

        let c = a as &mut dyn iter::Iterator<i32>;
        assert_eq!(c.next(), Option::some(42));
        assert_eq!(c.next(), Option::some(42));
        assert_eq!(c.next(), Option::some(42));
        // ...
    }
}
